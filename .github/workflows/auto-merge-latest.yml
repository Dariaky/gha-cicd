name: Auto merge latest
run-name: Auto merge latest from master into dev and qa branches

on:
  push:
    branches:
      - master

jobs:
  merge-branches:
    runs-on: ubuntu-latest
    outputs:
      SUCCESS_DEV: ${{ steps.merge-dev.outputs.SUCCESS_DEV }}
      SUCCESS_QA: ${{ steps.merge-qa.outputs.SUCCESS_QA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all branches

      - name: Configure git credentials
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Update DEV
        id: merge-dev
        run: |
          git checkout dev
          if git merge --no-ff --no-edit -m "Merge master into dev (Github auto merge)" origin/master; then
            git push origin dev
            echo "SUCCESS_DEV=true" >> $GITHUB_OUTPUT
          else
            git merge --abort
            echo "auto merge to dev failed due to conflicts"
            echo "SUCCESS_DEV=false" >> $GITHUB_OUTPUT
          fi

      - name: Update QA
        id: merge-qa
        run: |
          git checkout qa
          if git merge --no-ff --no-edit -m "Merge master into qa (Github auto merge)" origin/master; then
            git push origin qa
            echo "SUCCESS_QA=true" >> $GITHUB_OUTPUT
          else
            git merge --abort
            echo "auto merge to qa failed due to conflicts"
            echo "SUCCESS_QA=false" >> $GITHUB_OUTPUT
          fi


  deploy_to_dev:
   runs-on: ubuntu-latest
   needs: merge-branches
   if: needs.merge-branches.outputs.SUCCESS_DEV == 'true'
   steps:
     - name: Deploy DEV to AWS S3
       uses: ./.github/actions/deploy-to-s3
       with:
         environment_name: dev
         aws_bucket: ${{ secrets.AWS_BUCKET }}
         aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy_to_qa:
    runs-on: ubuntu-latest
    needs: merge-branches
    if: needs.merge-branches.outputs.SUCCESS_QA == 'true'
    steps:
      - name: Deploy QA to AWS S3
        uses: ./.github/actions/deploy-to-s3
        with:
          environment_name: qa
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  post-to-slack:
    runs-on: ubuntu-latest
    needs: merge-branches
    if: ${{ (needs.merge-branches.outputs.SUCCESS_DEV == 'false') || (needs.merge-branches.outputs.SUCCESS_QA == 'false') }}
    steps:
      - name: Set SHORT_SHA environment variable
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
      - name: Set Slack Message
        run: |
          if [ "${{ needs.merge-branches.outputs.SUCCESS_DEV }}" == "false" ] && [ "${{ needs.merge-branches.outputs.SUCCESS_QA }}" == "false" ]; then
            echo "SLACK_MESSAGE=Unable to merge master to DEV and QA. Conflict should be resolved manually." >> $GITHUB_ENV
          elif [ "${{ needs.merge-branches.outputs.SUCCESS_DEV }}" == "false" ]; then
            echo "SLACK_MESSAGE=Unable to merge master to DEV. Conflict should be resolved manually." >> $GITHUB_ENV
          else
            echo "SLACK_MESSAGE=Unable to merge master to QA. Conflict should be resolved manually." >> $GITHUB_ENV
          fi
      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "warning",
                  "title": ":mega: Github Action Alert :mega:",
                  "fields": [
                    {
                      "title": "Auto merge failed due to conflicts",
                      "value": "${{ env.SLACK_MESSAGE }}"
                    },
                    {
                      "title": "Commit",
                      "value": "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ env.SHORT_SHA }}>",
                      "short": true
                    },
                    {
                      "title": "Actions URL",
                      "value": "<${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}|Link to workflow run>",
                      "short": true
                    }
                  ],
                  "footer": "This slack message was automatically generated via the '${{ github.workflow }}' Github Actions workflow"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
